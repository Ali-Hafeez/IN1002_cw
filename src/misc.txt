private static int[] analyzeConflict(int[][] cnf, int[] model) {
    int[] conflictClause = new int[model.length];
    int conflictLiteral = model[model.length-1]; // the literal that caused the conflict

    // find all literals assigned true in the same level as the conflict literal
    Set<Integer> trueLiterals = new HashSet<>();
    for (int i = model.length-2; i >= 0; i--) {
        if (Math.abs(model[i]) == Math.abs(conflictLiteral)) {
            break; // reached the level of the conflict literal
        }
        if (model[i] > 0) {
            trueLiterals.add(model[i]);
        }
    }

    // create the conflict clause from the true literals and the negation of the conflict literal
    int i = 0;
    for (int literal : trueLiterals) {
        conflictClause[i++] = -literal;
    }
    conflictClause[i] = -conflictLiteral;

    // add the conflict clause to the clause database
    int[][] newCnf = new int[cnf.length+1][];
    for (int j = 0; j < cnf.length; j++) {
        newCnf[j] = cnf[j];
    }
    newCnf[cnf.length] = conflictClause;

    // return the new clause database
    return newCnf;
}

private static int[] backtrack(int[][] cnf, int[] model) {
    int lastDecision = -1;

    // find the most recent decision level with unassigned literals
    for (int i = model.length-2; i >= 0; i--) {
        if (model[i] != 0) {
            lastDecision = i;
            break;
        }
    }

    // negate the last decision literal and add it to the model as a new decision
    int negatedLiteral = -model[lastDecision];
    model[lastDecision] = negatedLiteral;

    // return the updated model
    return model;
}
private static int[] dpll(int[][] cnf, int[] model) {
    while (true) {
        boolean allClausesTrue = true;
        for (int[] clause : cnf) {
            boolean anyLiteralsTrue = false;
            boolean allLiteralsFalse = true;
            for (int literal : clause) {
                int variable = Math.abs(literal);
                boolean isNegated = (literal < 0);
                boolean isAssigned = (model[variable] != 0);
                boolean isTrue = (model[variable] == (isNegated ? -1 : 1));
                if (isAssigned && isTrue) {
                    anyLiteralsTrue = true;
                    break;
                } else if (isAssigned && !isTrue) {
                    // Literal is false, move to next literal
                } else {
                    allLiteralsFalse = false;
                }
            }
            if (anyLiteralsTrue) {
                // Clause is true, move to next clause
            } else if (allLiteralsFalse) {
                // Clause is false, backtrack
                int[] conflictClause = clause;
                int[] conflictVariables = analyzeConflict(cnf, model);
                if (conflictVariables == null) {
                    return null;
                } else {
                    backtrack(cnf, model, conflictVariables);
                    break;
                }
            } else {
                allClausesTrue = false;
                break;
            }
        }
        if (allClausesTrue) {
            return model;
        }
    }
}

public static boolean checkSat(int[][] cnf) {
    int[] model = new int[cnf.length]; // current partial assignment
    Set<Integer> literals = new HashSet<>(); // unassigned literals
    for (int[] clause : cnf) {
        for (int literal : clause) {
            literals.add(Math.abs(literal));
        }
    }
    return dpll(cnf, model, literals);
    }

    public int[] checkSat(int[][] clauseDatabase) {
        int[] partialAssignment = new int[clauseDatabase[0].length];
        int result = dpll(partialAssignment, clauseDatabase);
        if (result != -1) {
            return partialAssignment;
        }
        result = cdcl(partialAssignment, clauseDatabase);
        if (result != -1) {
            return partialAssignment;
        }
        return null;
    }

    private int dpll(int[] partialAssignment, int[][] clauseDatabase) {
        int unassignedVar = findUnassignedVar(partialAssignment);
        if (unassignedVar == -1) {
            return checkClauseDatabase(partialAssignment, clauseDatabase) ? 1 : -1;
        }
        partialAssignment[unassignedVar] = 1;
        int result = dpll(partialAssignment, clauseDatabase);
        if (result != -1) {
            return result;
        }
        partialAssignment[unassignedVar] = 0;
        result = dpll(partialAssignment, clauseDatabase);
        if (result != -1) {
            return result;
        }
        partialAssignment[unassignedVar] = -1;
        return -1;
    }

    private int cdcl(int[] partialAssignment, int[][] clauseDatabase) {
        int numConflicts = 0;
        List<int[]> learnedClauses = new ArrayList<>();
        while (numConflicts < MAX_CONFLICTS) {
            int conflictVar = getConflictVar(partialAssignment, clauseDatabase);
            if (conflictVar == -1) {
                return -1;
            }
            int[] conflictClause = getConflictClause(partialAssignment, clauseDatabase, conflictVar);
            learnedClauses.add(conflictClause);
            clauseDatabase = addLearnedClauses(clauseDatabase, learnedClauses);
            int result = dpll(partialAssignment, clauseDatabase);
            if (result != -1) {
                return result;
            }
            numConflicts++;
        }
        return -1;
    }

    private int findUnassignedVar(int[] partialAssignment) {
        for (int i = 0; i < partialAssignment.length; i++) {
            if (partialAssignment[i] == -1) {
                return i;
            }
        }
        return -1;
    }

public int[] checkSat(int[][] clauseDatabase) {
    int[] partialAssignment = new int[clauseDatabase[0].length];
    Arrays.fill(partialAssignment, -1); // initialize all variables as unassigned
    return checkSatRecursive(partialAssignment, clauseDatabase, 0);
}

private int[] checkSatRecursive(int[] partialAssignment, int[][] clauseDatabase, int variableIndex) {
    // check if the current assignment satisfies all clauses
    if (checkClauseDatabase(partialAssignment, clauseDatabase)) {
        return partialAssignment;
    }

    // check if there is a contradiction in the current assignment
    for (int[] clause : clauseDatabase) {
        int result = checkClausePartial(partialAssignment, clause);
        if (result == -1) {
            // the clause is unsatisfied, so the assignment is a contradiction
            return null;
        } else if (result == 1) {
            // the clause is already satisfied, no need to do anything
        } else {
            // the clause is not yet satisfied and has a single unassigned literal,
            // so we can assign that literal to satisfy the clause
            int unitLiteral = findUnit(partialAssignment, clause);
            partialAssignment[Math.abs(unitLiteral) - 1] = unitLiteral > 0 ? 1 : 0;
            return checkSatRecursive(partialAssignment, clauseDatabase, variableIndex);
        }
    }

    // try to assign a variable to satisfy the remaining clauses
    for (int i = variableIndex; i < partialAssignment.length; i++) {
        if (partialAssignment[i] == -1) {
            // try assigning true
            partialAssignment[i] = 1;
            int[] result = checkSatRecursive(partialAssignment, clauseDatabase, i + 1);
            if (result != null) {
                return result;
            }

            // try assigning false
            partialAssignment[i] = 0;
            result = checkSatRecursive(partialAssignment, clauseDatabase, i + 1);
            if (result != null) {
                return result;
            }

            // restore the variable's original unassigned state
            partialAssignment[i] = -1;

            // we've tried all possibilities for this variable, so no satisfying assignment exists
            return null;
        }
    }

    // all variables are assigned, but the clause database is still unsatisfied
    return null;
}










public int[] checkSat(int[][] clauseDatabase) {
    int[] partialAssignment = new int[clauseDatabase[0].length];
    int result = dpll(partialAssignment, clauseDatabase);
    if (result != -1) {
        return partialAssignment;
    }
    result = cdcl(partialAssignment, clauseDatabase);
    if (result != -1) {
        return partialAssignment;
    }
    return null;
}

private int dpll(int[] partialAssignment, int[][] clauseDatabase) {
    int unassignedVar = findUnassignedVar(partialAssignment);
    if (unassignedVar == -1) {
        return checkClauseDatabase(partialAssignment, clauseDatabase) ? 1 : -1;
    }
    partialAssignment[unassignedVar] = 1;
    int result = dpll(partialAssignment, clauseDatabase);
    if (result != -1) {
        return result;
    }
    partialAssignment[unassignedVar] = 0;
    result = dpll(partialAssignment, clauseDatabase);
    if (result != -1) {
        return result;
    }
    partialAssignment[unassignedVar] = -1;
    return -1;
}

private int cdcl(int[] partialAssignment, int[][] clauseDatabase) {
    int numConflicts = 0;
    List<int[]> learnedClauses = new ArrayList<>();
    while (numConflicts < MAX_CONFLICTS) {
        int conflictVar = getConflictVar(partialAssignment, clauseDatabase);
        if (conflictVar == -1) {
            return -1;
        }
        int[] conflictClause = getConflictClause(partialAssignment, clauseDatabase, conflictVar);
        learnedClauses.add(conflictClause);
        clauseDatabase = addLearnedClauses(clauseDatabase, learnedClauses);
        int result = dpll(partialAssignment, clauseDatabase);
        if (result != -1) {
            return result;
        }
        numConflicts++;
    }
    return -1;
}

private int findUnassignedVar(int[] partialAssignment) {
    for (int i = 0; i < partialAssignment.length; i++) {
        if (partialAssignment[i] == -1) {
            return i;
        }
    }
    return -1;
}



public int[] checkSat(int[][] clauseDatabase) {
    int[] assignment = new int[clauseDatabase[0].length + 1]; // initialize all variables to 0
    boolean isSat = dpll(assignment, clauseDatabase);
    if (isSat) {
        return assignment;
    } else {
        return null;
    }
}


































